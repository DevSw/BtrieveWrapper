namespace {% Model.Namespace %}
{
{% for key in Keys %}    [BtrieveWrapper.Orm.Key({% key.KeyNumber %}{% for parameter in key.AttributeParameters %},
        {% parameter.Key %} = {% parameter.Value %}{% endfor %})]
{% endfor %}    [BtrieveWrapper.Orm.Record({% FixedLength %}{% for parameter in AttributeParameters %},
        {% parameter.Key %} = {% parameter.Value %}{% endfor %})]
    public class {% DisplayName %} : BtrieveWrapper.Orm.Record<{% DisplayName %}>
    {
        public {% Name %}() {
            //Initialize record.
        }

		public {% Name %}(byte[] dataBuffer) { }{% for field in Fields %}
		
{% for segment in field.KeySegments %}        [BtrieveWrapper.Orm.KeySegment({% segment.Key.KeyNumber %}, {% segment.Index %}{% for parameter in segment.AttributeParameters %},
            {% parameter.Key %} = {% parameter.Value %}{% endfor %})]
{% endfor %}        [BtrieveWrapper.Orm.Field({% field.Position %}, {% field.Length %}, BtrieveWrapper.KeyType.{% field.KeyType %}, typeof({% field.ConverterType.FullName %}){% if field.Parameter %}, Parameter = {% field.Parameter %}{% endif %}{% if field.NullType = "None" %}{% else %}, NullType = BtrieveWrapper.Orm.NullType.{% field.NullType %}{% endif %})]
        public {% if field.ValueTypeDisplayName %}{% field.ValueTypeDisplayName %}{% else %}object{% endif %} {% field.DisplayName %} {
            get { return {% if field.ValueTypeDisplayName %}({% field.ValueTypeDisplayName %}){% endif %}this.GetValue("{% field.DisplayName %}"); }
            set { this.SetValue("{% field.DisplayName %}", value); }
        }{% endfor %}
    }

    public class {% DisplayName %}Manager : BtrieveWrapper.Orm.RecordManager<{% Name %}> {
        public {% Name %}Manager(BtrieveWrapper.Orm.Path path = null, string dllPath = null, string applicationId = "BW", ushort threadId = 0 , string ownerName = null, BtrieveWrapper.OpenMode? openMode = null, int reusableCapacity = 1000, byte[] temporaryBuffer = null)
            : base(path, dllPath, applicationId, threadId, ownerName, openMode, reusableCapacity, temporaryBuffer) { }

        public {% DisplayName %}Manager(BtrieveWrapper.Operator nativeOperator, BtrieveWrapper.Orm.Path path = null, string ownerName = null, BtrieveWrapper.OpenMode? openMode = null, int reusableCapacity = 1000, byte[] temporaryBuffer = null)
            : base(nativeOperator, path, ownerName, openMode, reusableCapacity, temporaryBuffer) { }{% for key in Keys %}

        public BtrieveWrapper.Orm.KeyInfo {% key.DisplayName %} { get { return this.Keys[{% key.KeyNumber %}]; } }{% endfor %}
    }
}